import React, { useState } from "react";
import "./ScienceQuiz.css";

// Simple confetti component
const ConfettiPiece = ({ delay, duration }) => {
  const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7', '#dda0dd', '#98d8c8'];
  const randomColor = colors[Math.floor(Math.random() * colors.length)];
  const randomLeft = Math.random() * 100;
  const randomAnimationDelay = Math.random() * 2;
  
  return (
    <div
      className="confetti-piece"
      style={{
        '--color': randomColor,
        '--left': `${randomLeft}%`,
        '--delay': `${delay + randomAnimationDelay}s`,
        '--duration': `${duration}s`
      }}
    />
  );
};

const Confetti = ({ pieceCount = 150, duration = 3 }) => {
  return (
    <div className="confetti-container">
      {[...Array(pieceCount)].map((_, i) => (
        <ConfettiPiece key={i} delay={i * 0.01} duration={duration} />
      ))}
    </div>
  );
};

// Bilingual Questions
const questionsData = {
  beginner: {
    en: [
      { question: "What is H2O commonly known as?", options: ["Hydrogen", "Water", "Salt", "Oxygen"], answer: "Water" },
      { question: "The Earth revolves around?", options: ["Moon", "Sun", "Mars", "Jupiter"], answer: "Sun" },
      { question: "How many legs does a spider have?", options: ["6", "8", "10", "4"], answer: "8" },
      { question: "What color is the sun?", options: ["Blue", "Yellow", "Red", "Green"], answer: "Yellow" },
      { question: "How many days are there in a week?", options: ["5", "6", "7", "8"], answer: "7" },
    ],
    ta: [
      { question: "H2O рокрпКродрпБро╡ро╛роХ роОродрпИ роЕро┤рпИроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ?", options: ["ро╣рпИроЯрпНро░роЬройрпН", "роирпАро░рпН", "роЙрокрпНрокрпБ", "роЖроХрпНроЪро┐роЬройрпН"], answer: "роирпАро░рпН" },
      { question: "рокрпВрооро┐ роОродро▒рпНроХро╛роХ роЪрпБро┤ро▓рпНроХро┐ро▒родрпБ?", options: ["роЪроирпНродро┐ро░ройрпН", "роЪрпВро░ро┐ропройрпН", "роЪрпЖро╡рпНро╡ро╛ропрпН", "роЪройро┐роХро┐ро░роХройрпН"], answer: "роЪрпВро░ро┐ропройрпН" },
      { question: "роТро░рпБ ро╡рогро┐роХро┐ роОро╡рпНро╡ро│ро╡рпБ роХро╛ро▓рпНроХро│рпН роХрпКрогрпНроЯродрпБ?", options: ["6", "8", "10", "4"], answer: "8" },
      { question: "роЪрпВро░ро┐ропройрпН роОроирпНрод роиро┐ро▒роорпН?", options: ["роирпАро▓роорпН", "роороЮрпНроЪро│рпН", "роЪро┐ро╡рокрпНрокрпБ", "рокроЪрпНроЪрпИ"], answer: "роороЮрпНроЪро│рпН" },
      { question: "роТро░рпБ ро╡ро╛ро░родрпНродро┐ро▓рпН роОродрпНродройрпИ роиро╛роЯрпНроХро│рпН роЗро░рпБроХрпНроХро┐ро▒родрпБ?", options: ["5", "6", "7", "8"], answer: "7" },
    ]
  },
  medium: {
    en: [
      { question: "Which gas is most abundant in the Earth's atmosphere?", options: ["Oxygen", "Carbon Dioxide", "Nitrogen", "Helium"], answer: "Nitrogen" },
      { question: "What is the chemical symbol for Sodium?", options: ["S", "Na", "So", "Sd"], answer: "Na" },
      { question: "Which planet is called the Red Planet?", options: ["Mars", "Venus", "Jupiter", "Saturn"], answer: "Mars" },
      { question: "What is the speed of light?", options: ["300,000 km/s", "150,000 km/s", "450,000 km/s", "200,000 km/s"], answer: "300,000 km/s" },
      { question: "Which organ produces insulin?", options: ["Liver", "Kidney", "Pancreas", "Heart"], answer: "Pancreas" },
    ],
    ta: [
      { question: "рокрпВрооро┐ропро┐ройрпН ро╡ро│ро┐роорогрпНроЯро▓родрпНродро┐ро▓рпН роЕродро┐роХрооро╛роХ роХро╛рогрокрпНрокроЯрпБроорпН ро╡ро╛ропрпБ роОродрпБ?", options: ["роЖроХрпНроЪро┐роЬройрпН", "роХро╛ро░рпНрокройрпН роЯрпИроЖроХрпНроЪрпИроЯрпБ", "роирпИроЯрпНро░роЬройрпН", "ро╣рпАро▓ро┐ропроорпН"], answer: "роирпИроЯрпНро░роЬройрпН" },
      { question: "роЪрпЛроЯро┐ропроорпН роОройрпНро▒ ро░роЪро╛ропрой роЪро┐ройрпНройроорпН роОродрпБ?", options: ["S", "Na", "So", "Sd"], answer: "Na" },
      { question: "роЪро┐ро╡рокрпНрокрпБ роХрпЛро│роорпН роОройрпНро▒рпБ роОроирпНрод роХрпЛро│рпН роЕро┤рпИроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ?", options: ["роЪрпЖро╡рпНро╡ро╛ропрпН", "ро╡рпАройро╕рпН", "роЪрпЖро╡рпНро╡ро╛ропрпН", "роЪройро┐роХро┐ро░роХроорпН"], answer: "роЪрпЖро╡рпНро╡ро╛ропрпН" },
      { question: "ро╡ро┐ро│роХрпНроХродрпНродро┐ройрпН ро╡рпЗроХроорпН роОройрпНрой?", options: ["300,000 km/s", "150,000 km/s", "450,000 km/s", "200,000 km/s"], answer: "300,000 km/s" },
      { question: "роОроирпНрод роЙро▒рпБрокрпНрокрпБ роЗройрпНроЪрпБро▓ро┐ройрпН роЙро▒рпНрокродрпНродро┐ роЪрпЖропрпНроХро┐ро▒родрпБ?", options: ["роХро▓рпНро▓рпАро░ро▓рпН", "роХро┐роЯрпНройро┐", "рокрпЗроЩрпНроХро┐ро░ро┐ропро╛ро╕рпН", "роЗродропроорпН"], answer: "рокрпЗроЩрпНроХро┐ро░ро┐ропро╛ро╕рпН" },
    ]
  },
  hard: {
    en: [
      { question: "What is the powerhouse of the cell?", options: ["Nucleus", "Mitochondria", "Chloroplast", "Ribosome"], answer: "Mitochondria" },
      { question: "What is the chemical formula of glucose?", options: ["C6H12O6", "H2O", "NaCl", "CO2"], answer: "C6H12O6" },
      { question: "What type of energy is stored in a stretched rubber band?", options: ["Kinetic", "Potential", "Thermal", "Electrical"], answer: "Potential" },
      { question: "What is the pH of pure water?", options: ["6", "7", "8", "9"], answer: "7" },
      { question: "Which scientist proposed the theory of relativity?", options: ["Newton", "Darwin", "Einstein", "Galileo"], answer: "Einstein" },
    ],
    ta: [
      { question: "роЪрпЖро▓рпН роОродрпБ роЪроХрпНродро┐ роЙро▒рпНрокродрпНродро┐ роЪрпЖропрпНроХро┐ро▒родрпБ?", options: ["роиро┐ропрпВроХрпНро▓ро┐ропро╕рпН", "роорпИроЯрпНроЯрпЛроХро╛рогрпНроЯрпНро░ро┐ропро╛", "роХрпБро│рпЛро░рпЛрокро┐ро│ро╛ро╕рпНроЯрпН", "ро░ро┐рокрпЛроЪрпЛроорпН"], answer: "роорпИроЯрпНроЯрпЛроХро╛рогрпНроЯрпНро░ро┐ропро╛" },
      { question: "роХрпБро│рпБроХрпЛро╕рпН роОройрпНро▒ ро░роЪро╛ропрой роЪрпВродрпНродро┐ро░роорпН?", options: ["C6H12O6", "H2O", "NaCl", "CO2"], answer: "C6H12O6" },
      { question: "роТро░рпБ роирпАроЯрпНроЯро┐роХрпНроХрокрпНрокроЯрпНроЯ ро░рокрпНрокро░рпН рокроирпНродро┐ро▓рпН роОроирпНрод ро╡роХрпИ роЪроХрпНродро┐ роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ?", options: ["роХрпИройрпЖроЯрпНроЯро┐роХрпН", "рокрпКроЯрпНроЯрпЖройрпНро╖ро┐ропро▓рпН", "ро╡рпЖрокрпНрок", "рооро┐ройрпНроЪро╛ро░роорпН"], answer: "рокрпКроЯрпНроЯрпЖройрпНро╖ро┐ропро▓рпН" },
      { question: "роЪрпБродрпНродрооро╛рой роирпАро░ро┐ройрпН pH роОройрпНрой?", options: ["6", "7", "8", "9"], answer: "7" },
      { question: "роЪроорпНрокроирпНродродрпНродро┐ропрпИроХрпН роХрогро┐родрпНродро╡ро░рпН ропро╛ро░рпН?", options: ["роиро┐ропрпВроЯрпНроЯройрпН", "роЯро╛ро░рпНро╡ро┐ройрпН", "роРройрпНро╕рпНроЯрпАройрпН", "роХро▓ро┐ро▓ро┐ропрпЛ"], answer: "роРройрпНро╕рпНроЯрпАройрпН" },
    ]
  },
};

export default function ScienceQuiz() {
  const [difficulty, setDifficulty] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showConfetti, setShowConfetti] = useState(false);
  const [streak, setStreak] = useState(0);
  const [appreciation, setAppreciation] = useState("");
  const [selectedAnswer, setSelectedAnswer] = useState("");
  const [showResult, setShowResult] = useState(false);
  const [isAnswering, setIsAnswering] = useState(false);
  const [language, setLanguage] = useState("en"); // Default English

  const startQuiz = (selectedDifficulty) => {
    setDifficulty(selectedDifficulty);
    setQuestions(questionsData[selectedDifficulty][language]);
    setCurrentQuestion(0);
    setScore(0);
    setStreak(0);
    setAppreciation("");
    setSelectedAnswer("");
    setShowResult(false);
  };

  const handleAnswer = (option) => {
    if (isAnswering) return;
    setIsAnswering(true);
    setSelectedAnswer(option);

    setTimeout(() => {
      const isCorrect = option === questions[currentQuestion].answer;

      if (isCorrect) {
        setScore(score + 1);
        setStreak(streak + 1);
        setShowConfetti(true);

        if (streak + 1 === 3) setAppreciation(language === "en" ? "ЁЯОЙ Amazing! 3 in a row! You're on fire! ЁЯОЙ" : "ЁЯОЙ роЕро░рпБроорпИ! 3 родрпКроЯро░рпНроЪрпНроЪро┐ропро╛роХ роЪро░ро┐! ЁЯФе ЁЯОЙ");
        else if (streak + 1 === 2) setAppreciation(language === "en" ? "ЁЯФе Great job! One more for a streak! ЁЯФе" : "ЁЯФе роЪро┐ро▒роирпНродродрпБ! родрпКроЯро░рпНроЪрпНроЪро┐роХрпНроХрпБ роЗройрпНройрпКройрпНро▒рпБ! ЁЯФе");
        else setAppreciation(language === "en" ? "тЬЕ Correct! Well done! тЬЕ" : "тЬЕ роЪро░ро┐ропро╛ройродрпБ! роиройрпНро▒ро╛роХроЪрпН роЪрпЖропрпНродрпАро░рпНроХро│рпН! тЬЕ");

        setTimeout(() => setShowConfetti(false), 3000);
      } else {
        if (streak >= 3) setAppreciation(language === "en" ? "тЭМ Oops! Streak broken, but keep going! тЭМ" : "тЭМ роУро╣рпН! родрпКроЯро░рпНроЪрпНроЪро┐ роорпБро▒ро┐роирпНродродрпБ, роЖройро╛ро▓рпН родрпКроЯро░рпБроЩрпНроХро│рпН! тЭМ");
        else setAppreciation(language === "en" ? "тЭМ Not quite right. Try the next one! тЭМ" : "тЭМ роЪро░ро┐ропро╛ройродро▓рпНро▓. роЕроЯрпБродрпНродродрпИроХрпН роорпБропро▒рпНроЪро┐ роЪрпЖропрпНропрпБроЩрпНроХро│рпН! тЭМ");
        setStreak(0);
      }

      setTimeout(() => {
        if (currentQuestion + 1 < questions.length) {
          setCurrentQuestion(currentQuestion + 1);
          setSelectedAnswer("");
          setAppreciation("");
          setIsAnswering(false);
        } else {
          setShowResult(true);
          setIsAnswering(false);
        }
      }, 2000);
    }, 500);
  };

  const resetQuiz = () => {
    setDifficulty(null);
    setQuestions([]);
    setCurrentQuestion(0);
    setScore(0);
    setStreak(0);
    setAppreciation("");
    setSelectedAnswer("");
    setShowResult(false);
    setIsAnswering(false);
  };

  const getScoreMessage = () => {
    const percentage = (score / questions.length) * 100;
    if (percentage >= 80) return language === "en" ? "ЁЯПЖ Excellent! You're a science star!" : "ЁЯПЖ роЕро░рпБроорпИ! роирпАроЩрпНроХро│рпН роЕро▒ро┐ро╡ро┐ропро▓рпН роироЯрпНроЪродрпНродро┐ро░роорпН!";
    if (percentage >= 60) return language === "en" ? "ЁЯСН Good job! Keep learning!" : "ЁЯСН роиро▓рпНро▓ ро╡рпЗро▓рпИ! роХро▒рпНро▒ро▓ро┐ройрпИ родрпКроЯро░рпБроЩрпНроХро│рпН!";
    if (percentage >= 40) return language === "en" ? "ЁЯУЪ Not bad! Practice makes perfect!" : "ЁЯУЪ роорпЛроЪрооро┐ро▓рпНро▓рпИ! рокропро┐ро▒рпНроЪро┐ роорпБро┤рпБроорпИропро╛роХрпНроХрпБроорпН!";
    return language === "en" ? "ЁЯТк Keep trying! You'll get better!" : "ЁЯТк родрпКроЯро░рпБроЩрпНроХро│рпН! роирпАроЩрпНроХро│рпН роорпЗроорпНрокроЯрпБро╡рпАро░рпНроХро│рпН!";
  };

  const switchLanguage = (lang) => {
    setLanguage(lang);
    if (difficulty) setQuestions(questionsData[difficulty][lang]);
  };

  return (
    <div className="quiz-container">
      {showConfetti && <Confetti pieceCount={200} duration={3} />}
      <div className="quiz-content">

        {/* Language Selector */}
        <div className="language-selector">
          <button
            className={language === "en" ? "active" : ""}
            onClick={() => switchLanguage("en")}
          >English</button>
          <button
            className={language === "ta" ? "active" : ""}
            onClick={() => switchLanguage("ta")}
          >родрооро┐ро┤рпН</button>
        </div>

        {!difficulty && (
          <div className="difficulty-selector">
            <h2 className="difficulty-heading">{language === "en" ? "Choose Your Challenge Level:" : "роЙроЩрпНроХро│рпН роЪро╡ро╛ро▓рпН роиро┐ро▓рпИропрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН:"}</h2>
            <button className="difficulty-btn beginner-btn" onClick={() => startQuiz('beginner')}>
              ЁЯЯв {language === "en" ? "Beginner" : "роЖро░роорпНрок роиро┐ро▓рпИ"}
            </button>
            <button className="difficulty-btn medium-btn" onClick={() => startQuiz('medium')}>
              ЁЯЯб {language === "en" ? "Medium" : "рооро┐родрооро╛рой"}
            </button>
            <button className="difficulty-btn hard-btn" onClick={() => startQuiz('hard')}>
              ЁЯФ┤ {language === "en" ? "Hard" : "роХроЯро┐ройроорпН"}
            </button>
          </div>
        )}

        {difficulty && !showResult && questions.length > 0 && (
          <>
            <div className="question-card">
              <div className="question-number">
                {language === "en" ? "Question" : "роХрпЗро│рпНро╡ро┐"} {currentQuestion + 1} {language === "en" ? "of" : "роорпКродрпНродроорпН"} {questions.length}
              </div>
              <h3 className="question-text">{questions[currentQuestion]?.question}</h3>
              <div className="options-grid">
                {questions[currentQuestion]?.options.map((option, index) => (
                  <button
                    key={index}
                    className={`option-btn ${
                      selectedAnswer === option
                        ? option === questions[currentQuestion].answer
                          ? 'selected-correct'
                          : 'selected-wrong'
                        : ''
                    }`}
                    onClick={() => handleAnswer(option)}
                    disabled={isAnswering}
                  >
                    {option}
                  </button>
                ))}
              </div>
            </div>

            {appreciation && <div className="appreciation">{appreciation}</div>}

            <div className="score-display">
              {language === "en" ? "Score" : "роородро┐рокрпНрокрпЖрогрпН"}: {score}/{questions.length} | {language === "en" ? "Streak" : "родрпКроЯро░рпН"}: {streak}
            </div>
          </>
        )}

        {showResult && (
          <div className="result-card">
            <h2>ЁЯОЙ {language === "en" ? "Quiz Complete!" : "ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ роорпБроЯро┐роирпНродродрпБ!"} ЁЯОЙ</h2>
            <div className="result-score">{score}/{questions.length}</div>
            <div className="result-message">{getScoreMessage()}</div>
            <button className="reset-btn" onClick={resetQuiz}>
              ЁЯФД {language === "en" ? "Try Again" : "роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐ роЪрпЖропрпН"}
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
